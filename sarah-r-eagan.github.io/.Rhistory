ph_subj[count]   <- j
ph_exp[count]    <- unique(mixed_data$exp[mixed_data$subj == j])
count = count + 1
}
ph_subj <- factor(ph_subj)
ph_exp  <- factor(ph_exp)
ph_data <- data.frame(ph_means, ph_subj, ph_exp)
rstatix::t_test(data = ph_data, formula = ph_means ~ ph_exp, comparisons = list(c(1, 2), c(1, 3), c(1, 4), c(3, 4)), p.adjust.method = "holm", var.equal = TRUE)
ph_data
# ----------
# setup data
ph_means      <- 0
ph_subj_means <- 0
ph_exp        <- 0
ph_subj       <- 0
ph_cond       <- 0
count = 1
unique_ph_subj <- unique(mixed_data$subj)
for (i in unique_ph_subj){
subj_mean <- mean(c(mean(mixed_data$rt[mixed_data$subj == i & mixed_data$cond == 'Refresh']), mean(mixed_data$rt[mixed_data$subj == i & mixed_data$cond == 'Unrefresh']), mean(mixed_data$rt[mixed_data$subj == i & mixed_data$cond == 'Novel'])))
ph_means[count]  <- subj_mean
ph_subj[count]   <- i
ph_exp[count]    <- unique(mixed_data$exp[mixed_data$subj == i])
count = count + 1
}
ph_subj <- factor(ph_subj)
ph_exp  <- factor(ph_exp)
ph_data <- data.frame(ph_means, ph_subj, ph_exp)
rstatix::t_test(data = ph_data, formula = ph_means ~ ph_exp, comparisons = list(c(1, 2), c(1, 3), c(1, 4), c(3, 4)), p.adjust.method = "holm", var.equal = TRUE)
rstatix::t_test(data = ph_data, formula = ph_means ~ ph_exp, comparisons = list(c(1, 2), c(1, 3), c(1, 4), c(3, 4)), p.adjust.method = "holm", var.equal = FALSE)
t.test(ph_means[ph_exp == 1 | ph_exp == 2] ~ ph_exp[ph_exp == 1 | ph_exp == 2], data = ph_data, var.equal = TRUE)
rstatix::cohens_d(data = ph_data, formula = ph_means ~ ph_exp, comparisons = list(c(1, 2), c(1, 3), c(1, 4), c(3, 4)), var.equal = FALSE)
help(cohens_d)
rstatix::cohens_d(data = ph_data, formula = ph_means ~ ph_exp, comparisons = list(c(1, 2), c(1, 3), c(1, 4), c(3, 4)), var.equal = TRUE)
rstatix::cohens_d(data = ph_data, formula = ph_means ~ ph_exp, comparisons = list(c(1, 2), c(1, 3), c(1, 4), c(3, 4)), paired = TRUE, var.equal = TRUE)
rstatix::cohens_d(data = ph_data, formula = ph_means ~ ph_exp, paired = TRUE, var.equal = TRUE)
rstatix::cohens_d(data = ph_data, formula = ph_means ~ ph_exp, comparisons = list(c(1, 2), c(1, 3), c(1, 4), c(3, 4)), var.equal = TRUE)
leveneTest(ph_means ~ ph_exp, ph_data)
# --------------
# Report Results
# Exp 1 (Equiprob) v. Exp 3 (Novel Prob)
ph_equiprob_novel_df        <-
ph_equiprob_novel_t         <-
ph_equiprob_novel_p         <-
ph_equiprob_novel_cohens_d  <-
# --------------
# Exp 1 v. Exp 4
e1_e4_contrasts <- list(mixed_anova = c(1, 0, 0, -1))
# -------
# t-tests
rstatix::t_test(data = ph_data, formula = ph_means ~ ph_exp, comparisons = list(c(1, 2), c(1, 3), c(1, 4), c(3, 4)), p.adjust.method = "holm", var.equal = ph_var_equal)
# determine if homogeneity of variances should be assumed
ph_levene <- leveneTest(ph_means ~ ph_exp, ph_data)
if (ph_levene$`Pr(>F)`[1] < .05){
ph_var_equal = FALSE
} else {
ph_var_equal = TRUE
}
# -------
# t-tests
rstatix::t_test(data = ph_data, formula = ph_means ~ ph_exp, comparisons = list(c(1, 2), c(1, 3), c(1, 4), c(3, 4)), p.adjust.method = "holm", var.equal = ph_var_equal)
# -------
# t-tests
ttests <- rstatix::t_test(data = ph_data, formula = ph_means ~ ph_exp, comparisons = list(c(1, 2), c(1, 3), c(1, 4), c(3, 4)), p.adjust.method = "holm", var.equal = ph_var_equal)
# Cohen's d
es <- rstatix::cohens_d(data = ph_data, formula = ph_means ~ ph_exp, comparisons = list(c(1, 2), c(1, 3), c(1, 4), c(3, 4)), var.equal = ph_var_equal)
ttests$df[1]
es$effsize[1]
es
mixed_anova
summary(mixed_anova)$df
mixed_anova$anova_table$`num Df`
mixed_anova$anova_table$`num Df`[1]
mixed_anova$anova_table$`num Df`[2]
mixed_anova$anova_table$`num Df`[3]
mixed_anova
# ---------------
# import packages
library('car')
library('bookdown')
library('ggplot2')
library('ggpubr')
library('jtools')
# ---------------
# import packages
library('car')
library('bookdown')
library('ggplot2')
library('ggpubr')
library('jtools')
library('sjstats')
library('afex')
library('emmeans')
# ---------
# folder(s)
data_folder = '/Users/zcole/Box/projects/freshprime/dev/freshprime_validity/data/'
# ---------
# variables
# df
fname     <- 'trimmed_probe_data.csv'
datafile  <- paste(data_folder, fname, sep = '/')
df        <- read.csv(file = datafile)
head(df)
# logical indexing - rename vars (probability conds already named)
options(max.print = 9999) #standard max too low
# conditions
df$conds[df$conds == 1] <- 'Refresh'
df$conds[df$conds == 2] <- 'Unrefresh'
df$conds[df$conds == 3] <- 'Novel'
ttype_conds <- unique(df$conds) #trial type conditions
ptype_conds <- c('Equiprobable', 'Novel_Probable', 'Unrefresh_Probable', 'Refresh_Probable') #probability type conditions
# setup data
rt          <- df$rts #rt dat
subj        <- factor(df$snum) # subj labs
exp         <- factor(df$probs, levels = c('Equiprobable', 'Novel_Probable', 'Unrefresh_Probable', 'Refresh_Probable')) #experiment - probability conditions - between subjs
cond        <- factor(df$conds, levels = c('Refresh', 'Unrefresh', 'Novel')) #conds - within subjs
mixed_data  <- data.frame(rt, subj, exp, cond) #data frame
# 4 (between subjects: probability group) x 3 (within subjects: probe type) ANOVA
mixed_anova <- aov_ez('subj', 'rt', mixed_data, between = 'exp', within = 'cond', anova_table = list(correction = 'GG', es = 'pes'))
# --------------
# Report Results
# Interaction
bn_df1  <- mixed_anova$anova_table$`num Df`[3]
bn_df2  <- mixed_anova$anova_table$`den Df`[3]
bn_f    <- mixed_anova$anova_table$F[3]
bn_p    <- mixed_anova$anova_table$`Pr(>F)`[3]
bn_es   <- mixed_anova$anova_table$pes[3]
# Experiment (Group)
bn_df1  <- mixed_anova$anova_table$`num Df`[1]
bn_df2  <- mixed_anova$anova_table$`den Df`[1]
bn_f    <- mixed_anova$anova_table$F[1]
bn_p    <- mixed_anova$anova_table$`Pr(>F)`[1]
bn_es   <- mixed_anova$anova_table$pes[1]
# Trial Type (Probe)
bn_df1  <- mixed_anova$anova_table$`num Df`[2]
bn_df2  <- mixed_anova$anova_table$`den Df`[2]
bn_f    <- mixed_anova$anova_table$F[2]
bn_p    <- mixed_anova$anova_table$`Pr(>F)`[2]
bn_es   <- mixed_anova$anova_table$pes[2]
# ----------
# setup data
ph_means      <- 0
ph_subj_means <- 0
ph_exp        <- 0
ph_subj       <- 0
ph_cond       <- 0
# do the averaging
count = 1
unique_ph_subj <- unique(mixed_data$subj)
for (i in unique_ph_subj){
subj_mean <- mean(c(mean(mixed_data$rt[mixed_data$subj == i & mixed_data$cond == 'Refresh']), mean(mixed_data$rt[mixed_data$subj == i & mixed_data$cond == 'Unrefresh']), mean(mixed_data$rt[mixed_data$subj == i & mixed_data$cond == 'Novel'])))
ph_means[count]  <- subj_mean
ph_subj[count]   <- i
ph_exp[count]    <- unique(mixed_data$exp[mixed_data$subj == i])
count = count + 1
}
# create the mini dataset
ph_subj <- factor(ph_subj)
ph_exp  <- factor(ph_exp)
ph_data <- data.frame(ph_means, ph_subj, ph_exp)
# determine if homogeneity of variances should be assumed
ph_levene <- leveneTest(ph_means ~ ph_exp, ph_data)
if (ph_levene$`Pr(>F)`[1] < .05){
ph_var_equal = FALSE
} else {
ph_var_equal = TRUE
}
# -------
# t-tests
ttests <- rstatix::t_test(data = ph_data, formula = ph_means ~ ph_exp, comparisons = list(c(1, 2), c(1, 3), c(1, 4), c(3, 4)), p.adjust.method = "holm", var.equal = ph_var_equal)
# Cohen's d
es <- rstatix::cohens_d(data = ph_data, formula = ph_means ~ ph_exp, comparisons = list(c(1, 2), c(1, 3), c(1, 4), c(3, 4)), var.equal = ph_var_equal)
# --------------
# Report Results
# Exp 1 (Equiprob) v. Exp 2 (Novel Prob)
ph_equiprob_novel_df        <- ttests$df[1]
ph_equiprob_novel_t         <- abs(ttests$statistic[1])
ph_equiprob_novel_p         <- ttests$p[1]
ph_equiprob_novel_cohens_d  <- abs(es$effsize[1])
# Exp 1 (Equiprob) v. Exp 3 (Unrefresh Prob)
ph_equiprob_unref_df        <- ttests$df[2]
ph_equiprob_unref_t         <- abs(ttests$statistic[2])
ph_equiprob_unref_p         <- ttests$p[2]
ph_equiprob_unref_cohens_d  <- abs(es$effsize[2])
# Exp 1 (Equiprob) v. Exp 4 (Refresh Prob)
ph_equiprob_ref_df        <- ttests$df[3]
ph_equiprob_ref_t         <- abs(ttests$statistic[3])
ph_equiprob_ref_p         <- ttests$p[3]
ph_equiprob_ref_cohens_d  <- abs(es$effsize[3])
# Exp 3 (Unrefresh Prob) v. Exp 4 (Refresh Prob)
ph_ref_unref_df        <- ttests$df[4]
ph_ref_unref_t         <- abs(ttests$statistic[4])
ph_ref_unref_p         <- ttests$p[4]
ph_ref_unref_cohens_d  <- abs(es$effsize[4])
ph_ref_unref_t
mixed_anova
mixed_anova$anova_table$`Pr(>F)`
summary(mixed_anova)$pval.adjustments
summary(mixed_anova)$pval.adjustments[2]
mixed_anova$anova_table$`Pr(>F)`
bn_sphericity_p
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/archive/probe-4_exp_analysis_figs.R')
novel_U_N_df
novel_U_N_t
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-4_exp_analysis_figs.R')
warnings()
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-bn_exp_analysis.R')
# ---------------
# import packages
library('car')
library('bookdown')
library('ggplot2')
library('ggpubr')
library('jtools')
library('sjstats')
library('afex')
library('emmeans')
# ---------
# folder(s)
data_folder = '/Users/zcole/Box/projects/freshprime/dev/freshprime_validity/data/'
# ---------
# variables
# df
fname     <- 'trimmed_probe_data.csv'
datafile  <- paste(data_folder, fname, sep = '/')
df        <- read.csv(file = datafile)
head(df)
# logical indexing - rename vars (probability conds already named)
options(max.print = 9999) #standard max too low
# conditions
df$conds[df$conds == 1] <- 'Refresh'
df$conds[df$conds == 2] <- 'Unrefresh'
df$conds[df$conds == 3] <- 'Novel'
ttype_conds <- unique(df$conds) #trial type conditions
ptype_conds <- c('Equiprobable', 'Novel_Probable', 'Unrefresh_Probable', 'Refresh_Probable') #probability type conditions
# setup data
rt          <- df$rts #rt dat
subj        <- factor(df$snum) # subj labs
exp         <- factor(df$probs, levels = c('Equiprobable', 'Novel_Probable', 'Unrefresh_Probable', 'Refresh_Probable')) #experiment - probability conditions - between subjs
cond        <- factor(df$conds, levels = c('Refresh', 'Unrefresh', 'Novel')) #conds - within subjs
mixed_data  <- data.frame(rt, subj, exp, cond) #data frame
# -----
# anova
# 4 (between subjects: probability group) x 3 (within subjects: probe type) ANOVA
mixed_anova <- aov_ez('subj', 'rt', mixed_data, between = 'exp', within = 'cond', anova_table = list(correction = 'GG', es = 'pes'))
# -----------
# assumptions
bn_sphericity_p <- summary(mixed_anova)$sphericity.tests[2] #sphericity p-value
# -----------
# assumptions
bn_sphericity_p <- summary(mixed_anova)$sphericity.tests[2] #sphericity p-value
bn_shapiro      <- shapiro.test(x = mixed_anova$aov$`exp:cond`$residuals) # normality
hapiro.test(x = mixed_anova$aov$`exp:cond`$residuals)
shapiro.test(x = mixed_anova$aov$`exp:cond`$residuals)
mixed_anova$aov$`exp:cond`$residuals
mixed_anova$aov$`subj:cond`$residuals
# -----------
# assumptions
bn_sphericity_p <- summary(mixed_anova)$sphericity.tests[2] #sphericity p-value
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-bn_exp_analysis.R')
# -----------
# assumptions
bn_sphericity_p <- summary(mixed_anova)$sphericity.tests[2] #sphericity p-value
# if cannot assume sphericity, use Greenhouse-Geisser correction
if (bn_sphericity_p[3] >= .05){
bn_p    <- mixed_anova$anova_table$`Pr(>F)`[3] #p-value
} else {
bn_p    <- summary(mixed_anova)$pval.adjustments[2] #GG p-value
}
# if cannot assume sphericity, use Greenhouse-Geisser correction
if (bn_sphericity_p[3] >= .05){
bn_p    <- mixed_anova$anova_table$`Pr(>F)`[3] #p-value
} else {
bn_p    <- summary(mixed_anova)$pval.adjustments[2] #GG p-value
}
# if cannot assume sphericity, use Greenhouse-Geisser correction
if (refresh_sphericity_p >= .05){
refresh_p    <- refresh_rmanova$anova_table$`Pr(>F)` #p-value
} else {
refresh_p    <- summary(refresh_rmanova)$pval.adjustments[2] #GG p-value
}
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-4_exp_analysis_figs.R')
# if cannot assume sphericity, use Greenhouse-Geisser correction
if (refresh_sphericity_p >= .05){
refresh_p    <- refresh_rmanova$anova_table$`Pr(>F)` #p-value
} else {
refresh_p    <- summary(refresh_rmanova)$pval.adjustments[2] #GG p-value
}
bn_sphericity_p[3] >= .05
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-bn_exp_analysis.R')
bn_sphericity_p[3] >= .05
bn_sphericity_p[3]
bn_sphericity_p
ph_levene$`Pr(>F)`[1]
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-bn_exp_analysis.R')
ph_levene
ph_levene$`Pr(>F)`[1]
if (ph_levene$`Pr(>F)`[1] < .05){
ph_var_equal = FALSE
} else {
ph_var_equal = TRUE
}
ttests
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-bn_exp_analysis.R')
ttests
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-bn_exp_analysis.R')
ttests
es
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-4_exp_analysis_figs.R')
summary(unrefresh_U_N)
unrefresh_R_U
unrefresh_R_U           <- contrast(unrefresh_R_U_compare, unrefresh_R_U_contrasts, adjust = 'none')
unrefresh_R_U
conts <- list(unrefresh_rmanova = c(1, -1, 0), unrefresh_rmanova = c(1, 0, -1), unrefresh_rmanova = c(0, 1, -1))
comps <- emmeans(unrefresh_rmanoa, ~ unrefresh_conds)
comps <- emmeans(unrefresh_rmanova, ~ unrefresh_conds)
cc <- contrast(comps, conts, adjust = 'holm')
cc
# ----------
# IoR Effect
# Refresh vs. Unrefresh
unrefresh_contrasts <- list(R_U = c(1, -1, 0), R_N = c(1, 0, -1), U_N = c(0, 1, -1))
unrefresh_compare   <- emmeans(unrefresh_rmanova, ~ unrefresh_conds)
unrefresh           <- contrast(unrefresh_compare, unrefresh_contrasts, adjust = 'holm')
unrefresh
unrefresh_R_U_df        <- summary(unrefresh_R_U)$df[1] #df
unrefresh_R_U_df
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-4_exp_analysis_figs.R')
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-4_exp_analysis_figs.R')
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-4_exp_analysis_figs.R')
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-4_exp_analysis_figs.R')
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-bn_exp_analysis.R')
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-4_exp_analysis_figs.R')
length(df$probability_clean_allcorr)
length(df$probs)
n_end_trials        = length(df$probs)
n_total_trials      = 144 * 31 #n_trials x n_subs
data_removed        = 100 * ( 1 - ( n_end_trials / n_total_trials ) )
data_removed        = sprintf("%1.1f", data_removed)
n_trials_removed    = n_total_trials - n_end_trials
n_trials_removed
n_final             = length(df$probs)
n_total_trials      = n_end_trials #removed trials from the processed data
outliers_removed    = 100 * ( 1 - ( n_final / n_total_trials ) )
n_outliers_removed  = n_total_trials - n_final
n_outliers_removed
n_final
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/archive/probe-4_exp_analysis_figs.R')
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/archive/probe-4_exp_analysis_figs.R')
n_end_trials        = length(df$probs)
n_total_trials      = 144 * 31 #n_trials x n_subs
data_removed        = 100 * ( 1 - ( n_end_trials / n_total_trials ) )
data_removed        = sprintf("%1.1f", data_removed)
n_trials_removed    = n_total_trials - n_end_trials
n_trials_removed
n_end_trials        = length(df$probability_clean_allcorr)
n_total_trials      = 144 * 31 #n_trials x n_subs
data_removed        = 100 * ( 1 - ( n_end_trials / n_total_trials ) )
data_removed        = sprintf("%1.1f", data_removed)
n_trials_removed    = n_total_trials - n_end_trials
n_trials_removed
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-4_exp_analysis_figs.R')
refresh_baseline_R_U
refresh_R_U_p
refresh
refresh_contrasts <- list(R_U = c(1, -1, 0))
refresh_compare   <- emmeans(refresh_rmanova, ~ refresh_conds)
refresh           <- contrast(refresh_compare, refresh_contrasts, adjust = 'none')
refresh
help(contrast)
equiprob_holm_p     <- p.adjust(summary(equiprob)$p.value, method = 'holm')
equiprob_holm_p
equiprob_R_U_p
equiprob_R_N_p
equiprob_holm_p[2]
equiprob_holm_p[3]
help(t_test)
help(cohens_d)
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-4_exp_analysis_figs.R')
# ----------
# IoR Effect
equiprob_contrasts  <- list(R_U = c(1, -1, 0), R_N = c(1, 0, -1), U_N = c(0, 1, -1))
equiprob_compare    <- emmeans(equiprob_rmanova, ~ equiprob_conds)
equiprob            <- contrast(equiprob_compare, equiprob_contrasts, method = 'pairwise', adjust = 'none')
equiprob            <- contrast(equiprob_compare, method = 'pairwise', equiprob_contrasts, adjust = 'none')
# ----------
# IoR Effect
equiprob_contrasts  <- list(R_U = c(1, -1, 0), R_N = c(1, 0, -1), U_N = c(0, 1, -1))
equiprob_compare    <- emmeans(equiprob_rmanova, ~ equiprob_conds)
equiprob            <- contrast(equiprob_compare, equiprob_contrasts, adjust = 'none')
equiprob_holm_p     <- p.adjust(summary(equiprob)$p.value, method = 'holm')
equiprob
# ----------
# IoR Effect
equiprob_contrasts  <- list(R_U = c(1, -1, 0), R_N = c(1, 0, -1), U_N = c(0, 1, -1))
equiprob_compare    <- emmeans(equiprob_rmanova, ~ equiprob_conds)
equiprob            <- pairs(equiprob_compare, equiprob_contrasts, adjust = 'none')
equiprob
help(pairs)
help(emmenas)
help(emmeans)
equiprob            <- pairs(equiprob_compare)
equiprob
equiprob_compare    <- emmeans(equiprob_rmanova, equiprob_conds)
equiprob_conds
equiprob            <- contrast(equiprob_compare, equiprob_contrasts, adjust = 'none')
equiprob
# ----------
# IoR Effect
equiprob_contrasts  <- list(R_U = c(1, -1, 0), R_N = c(1, 0, -1), U_N = c(0, 1, -1))
equiprob_compare    <- emmeans(equiprob_rmanova, equiprob_conds)
equiprob_rmanova
ec <- lsmeans(equiprob_rmanova, ~ equiprob_conds)
ec
help(lsmeans)
equiprob_compare    <- emmeans(equiprob_rmanova, equiprob_conds ~ equiprob_conds)
equiprob            <- contrast(equiprob_compare, equiprob_contrasts, adjust = 'none')
equiprob
equiprob_compare    <- emmeans(equiprob_rmanova, ~ equiprob_conds | equiprob_conds)
equiprob            <- contrast(equiprob_compare, equiprob_contrasts, adjust = 'none')
equiprob
equiprob_compare    <- emmeans(equiprob_rmanova, ~ equiprob_conds | equiprob_subj)
help(aov_ez)
equiprob_compare    <- emmeans(equiprob_rmanova, ~ +equiprob_conds)
equiprob            <- contrast(equiprob_compare, equiprob_contrasts, adjust = 'none')
equiprob
help(emmenas)
help(emmeans)
equiprob_compare    <- emmeans(equiprob_rmanova, ~ | equiprob_conds)
equiprob_compare    <- emmeans(equiprob_rmanova, | equiprob_conds)
equiprob_compare    <- emmeans(equiprob_rmanova, ~ equiprob_conds|equiprob_conds)
equiprob            <- contrast(equiprob_compare, equiprob_contrasts, adjust = 'none')
equiprob
equiprob_compare    <- emmeans(equiprob_rmanova, equiprob_contrasts ~ equiprob_conds)
equiprob_compare    <- emmeans(equiprob_rmanova, R_U ~ equiprob_conds)
ttests <- rstatix::t_test(data = equiprob_data, formula = equiprob_rmanova, comparisons = equiprob_contrasts, p.adjust.method = "holm", var.equal = TRUE)
ttests <- rstatix::t_test(data = equiprob_data, formula = equiprob_rt ~ equiprob_conds, comparisons = equiprob_contrasts, p.adjust.method = "holm", var.equal = TRUE)
ttests <- rstatix::t_test(data = equiprob_data, formula = equiprob_rt ~ equiprob_conds, paired = TRUE, comparisons = equiprob_contrasts, p.adjust.method = "holm", var.equal = TRUE)
help("t.test")
help("t_test")
ttests <- rstatix::pairwise_t_test(data = equiprob_data, formula = equiprob_rt ~ equiprob_conds, comparisons = equiprob_contrasts, p.adjust.method = "holm")
ttests
ttests <- rstatix::pairwise_t_test(data = equiprob_data, formula = equiprobrmanova, comparisons = equiprob_contrasts, p.adjust.method = "holm")
ttests <- rstatix::pairwise_t_test(data = equiprob_data, formula = equiprob_rmanova, comparisons = equiprob_contrasts, p.adjust.method = "holm")
ttests <- rstatix::pairwise_t_test(data = equiprob_data, formula = equiprob_rt ~ equiprob_conds, comparisons = list(c(1, -1, 0), c(1, 0, -1), c(0, 1, -1)), p.adjust.method = "holm")
ttests
ttests <- rstatix::t_test(data = equiprob_data, formula = equiprob_rt ~ equiprob_conds, comparisons = list(c(1, -1, 0), c(1, 0, -1), c(0, 1, -1)), paired = TRUE, p.adjust.method = "holm")
ttests <- rstatix::t_test(data = equiprob_data, formula = equiprob_rt ~ equiprob_conds, comparisons = list(c(1, -1, 0), c(1, 0, -1), c(0, 1, -1)), p.adjust.method = "holm")
ttests <- rstatix::t_test(data = equiprob_data, formula = equiprob_rt ~ equiprob_conds, comparisons = list(c(1, -1, 0), c(1, 0, -1), c(0, 1, -1)))
ttests <- equiprob_data %>% rstatix::pairwise_t_test(formula = equiprob_rt ~ equiprob_conds, comparisons = list(c(1, -1, 0), c(1, 0, -1), c(0, 1, -1)))
ttests
equiprob_data
ttests <- rstatix::pairwise_t_test(data = equiprob_data, formula = equiprob_rt ~ equiprob_conds)
ttests
ttests <- rstatix::t_test(data = equiprob_data, formula = equiprob_rt ~ equiprob_conds, comparisons = list(c(1, -1, 0), c(1, 0, -1), c(0, 1, -1)))
ttests <- rstatix::t_test(data = equiprob_data, formula = equiprob_rt ~ equiprob_conds)
ttests
ttests <- rstatix::t_test(data = equiprob_data, formula = equiprob_rt ~ equiprob_conds, paired = TRUE)
t.test(data = equiprob_data, formula = equiprob_rt ~ equiprob_conds, paired = TRUE)
t.test(data = equiprob_data, equiprob_rt, equiprob_conds, paired = TRUE)
t.test(equiprob_rt, equiprob_conds, paired = TRUE)
help(t.test)
t.test(equiprob_conds, equiprob_rt, paired = TRUE)
t.test(formula = equiprob_rt ~ equiprob_conds, data = equiprob_data, paired = TRUE)
t.test(formula = equiprob_rt[equiprob_conds == 'Refresh' | equiprob_conds == 'Unrefresh'] ~ equiprob_conds[equiprob_conds == 'Refresh' | equiprob_conds == 'Unrefresh'], data = equiprob_data, paired = TRUE)
equiprob
Rmisc::summarySEwithin(equiprob_data, measurevar = 'equiprob_rt', withinvars = 'equiprob_conds', idvar = 'equiprob_subj', na.rm = FALSE, conf.interval = .95)
Rmisc::summarySEwithin(equiprob_data, measurevar = 'equiprob_rt', withinvars = 'equiprob_subj', idvar = 'equiprob_subj', na.rm = FALSE, conf.interval = .95)
Rmisc::summarySEwithin(equiprob_data, measurevar = 'equiprob_rt', withinvars = 'equiprob_subj', idvar = 'equiprob_conds', na.rm = FALSE, conf.interval = .95)
Rmisc::summarySEwithin(equiprob_data, measurevar = 'equiprob_rt', withinvars = 'equiprob_subj', na.rm = FALSE, conf.interval = .95)
Rmisc::summarySEwithin(equiprob_data, measurevar = 'equiprob_rt', withinvars = c('equiprob_subj', 'equiprob_conds'), idvar = 'equiprob_subj', na.rm = FALSE, conf.interval = .95)
ttests <- rstatix::t_test(data = equiprob_ph_data, formula = equiprob_rmanova, comparisons = equiprob_contrasts, p.adjust.method = "holm", var.equal = TRUE)
equiprob_ph_data <- Rmisc::summarySEwithin(equiprob_data, measurevar = 'equiprob_rt', withinvars = c('equiprob_subj', 'equiprob_conds'), idvar = 'equiprob_subj', na.rm = FALSE, conf.interval = .95)
ttests <- rstatix::t_test(data = equiprob_ph_data, formula = equiprob_rmanova, comparisons = equiprob_contrasts, p.adjust.method = "holm", var.equal = TRUE)
ttests <- rstatix::t_test(data = equiprob_ph_data, formula = equiprob_rt ~ equiprob_conds, comparisons = list(c(1, -1, 0), c(1, 0, -1), c(0, 1, -1)), p.adjust.method = "holm", var.equal = TRUE)
ttests <- rstatix::t_test(data = equiprob_ph_data, formula = equiprob_rt ~ equiprob_conds, comparisons = list(c(1, -1, 0), c(1, 0, -1), c(0, 1, -1)), p.adjust.method = "holm", var.equal = TRUE, paired = TRUE)
ttests
t.test(equiprob_rt ~ equiprob_conds, equiprob_data, paired = TRUE)
t.test(equiprob_rt[equiprob_conds == 'Refresh' | equiprob_conds == 'Unrefresh'] ~ equiprob_conds[equiprob_conds == 'Refresh' | equiprob_conds == 'Unrefresh'], equiprob_data, paired = TRUE)
t.test(equiprob_rt[equiprob_conds == 'Refresh' | equiprob_conds == 'Unrefresh'] ~ equiprob_conds[equiprob_conds == 'Refresh' | equiprob_conds == 'Unrefresh'], equiprob_ph_data, paired = TRUE)
ttests <- rstatix::t_test(data = equiprob_ph_data, formula = equiprob_rt ~ equiprob_conds, comparisons = list(c("Refresh", "Unrefresh"), c("Refresh", "Novel"), c("Novel", "Unrefresh")), p.adjust.method = "holm", var.equal = TRUE, paired = TRUE)
ttests
equiprob <- rstatix::t_test(data = equiprob_ph_data, formula = equiprob_rt ~ equiprob_conds, comparisons = list(c('Refresh', 'Unrefresh'), c('Refresh', 'Novel'), c('Unrefresh', 'Novel')), p.adjust.method = "holm", var.equal = TRUE, paired = TRUE)
equiprob_holm_p     <- p.adjust(summary(equiprob)$p.value, method = 'holm')
equiprob <- rstatix::t_test(data = equiprob_ph_data, formula = equiprob_compare, comparisons = equiprob_contrasts, p.adjust.method = "holm", var.equal = TRUE, paired = TRUE)
equiprob <- rstatix::t_test(data = equiprob_ph_data, formula = equiprob_rt ~ equiprob_conds, comparisons = equiprob_contrasts, p.adjust.method = "holm", var.equal = TRUE, paired = TRUE)
# ----------
# IoR Effect
equiprob_contrasts  <- list(R_U = c('Refresh', 'Unrefresh'), R_N = c('Refresh', 'Novel'), U_N = c('Unrefresh', 'Novel'))
equiprob_compare    <- equiprob_rmanova, ~ equiprob_conds
equiprob_compare    <- equiprob_rmanova ~ equiprob_conds
equiprob <- rstatix::t_test(data = equiprob_ph_data, formula = equiprob_compare, comparisons = equiprob_contrasts, p.adjust.method = "holm", var.equal = TRUE, paired = TRUE)
equiprob_compare    <- equiprob_rt ~ equiprob_conds
equiprob_ph_data <- Rmisc::summarySEwithin(equiprob_data, measurevar = 'equiprob_rt', withinvars = c('equiprob_subj', 'equiprob_conds'), idvar = 'equiprob_subj', na.rm = FALSE, conf.interval = .95)
equiprob
equiprob <- rstatix::t_test(data = equiprob_ph_data, formula = equiprob_compare, comparisons = equiprob_contrasts, p.adjust.method = "holm", var.equal = TRUE, paired = TRUE)
equiprob
summary(equiprob)$p
equiprob$p
source('~/Box/projects/freshprime/dev/freshprime_validity/analysis/probe_trimmed-4_exp_analysis_figs.R')
setwd("~/Box/z_site/neurophysicole.github.io")
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
